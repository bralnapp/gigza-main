import DashboardLayout from "@/modules/dashboard/components/layout";
import React, { useEffect, useState } from "react";
import Image from "next/image";
import { MetricsCard } from "@/modules/dashboard/components/misc";
import { Button } from "@/modules/common/components/input/button";
import { useRouter } from "next/router";
import { useMutation, useQuery } from "react-query";
import { useAccount } from "wagmi";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";

// images
import money from "@/public/asset/referral/money.svg";
import coins from "@/public/asset/referral/coins.svg";
import people from "@/public/asset/referral/people.svg";
import hero from "@/public/asset/referral/hero.svg";
import duplicateIcon from "@/public/asset/icons/duplicate.svg";
import { useForm } from "react-hook-form";
import { TextInput } from "@/modules/dashboard/components/input";
import { randomTextGenerator } from "utils/helper";
import { toast } from "react-hot-toast";
import axios from "axios";

// Referral_id is generated by the frontend
// referrer_id is someone that referred you. i.e someone's referral_id

const schema = yup
	.object()
	.shape({
		email: yup.string().email().required(),
		address: yup.string().required(),
		// referral_id: yup.string().required(),
		referrer_id: yup.string().required()
	})
	.required();

type FormData = {
	email: string;
	address: string;
	referral_id: string;
	referrer_id: string | string[];
};

const Earn = () => {
	const router = useRouter();
	const { referralCode } = router.query;
	const { address } = useAccount();
	const [isSubmittingForm, setIsSubmittingForm] = useState(false);
	const [referralId] = useState<string>(
		typeof router.query.referralCode === "string"
			? router.query.referralCode
			: ""
	);
	// const address = "0x98683b170334aC8FC5CF6a576A4Dd14B28714f4";
	const {
		register,
		handleSubmit,
		getValues,
		formState: { errors }
	} = useForm<FormData>({
		resolver: yupResolver(schema),
		defaultValues: {
			email: "",
			address,
			referrer_id: referralId,
			referral_id: randomTextGenerator()
		}
	});

	const { isLoading, error, data, refetch } = useQuery(
		["referralDetails", address],
		async () => {
			if (address) {
				const response = await fetch(
					`https://referral--backend--n9kdq2x27s72.code.run/users/address/${address.toLowerCase()}`
				);
				return response.json();
			}
		},
		{
			staleTime: Infinity
		}
	);

	const onSubmit = async (data: FormData) => {
		const notification = toast.loading("Please wait...");
		setIsSubmittingForm(true);
		try {
			const res = await axios.post(
				`https://referral--backend--n9kdq2x27s72.code.run/register/users/referrer/${getValues(
					"referrer_id"
				)}`,
				{
					email: data.email,
					address: address?.toLowerCase() as string,
					referral_id: randomTextGenerator(),
					referrer_id: data.referrer_id
				}
			);

			if (res.status == 400) {
				setIsSubmittingForm(false);
				toast.error(
					// @ts-ignore
					error?.response?.data?.detail || "Opps, something went wrong",
					{
						id: notification
					}
				);
			}
			await refetch();
			toast.success("Refer more people to win more points", {
				id: notification
			});
			setIsSubmittingForm(false);
		} catch (error) {
			setIsSubmittingForm(false);
			toast.error(
				// @ts-ignore
				error?.response?.data?.detail || "Opps, something went wrong",
				{
					id: notification
				}
			);
		}
	};

	const copyToClipboard = () => {
		void navigator.clipboard.writeText(
			`gigza-main.vercel.app/dashboard/earn?referralCode=${data?.referral_id}`
		);
		toast.success("Referral link copied successfully");
	};

	return (
		<DashboardLayout>
			<div className="layout-container pt-8 pb-[120px] md:pt-12">
				{/* metrics section */}
				{!data?.detail ? (
					<section className="mb-8  flex flex-col gap-y-6 rounded-lg bg-white py-5 px-4 min-[540px]:gap-y-8 md:grid md:flex-none md:grid-cols-2 md:flex-row md:justify-between lg:py-8 lg:px-10">
						<div className="flex items-center gap-x-3">
							<Image
								src={money}
								alt=""
								className="h-10 w-10 min-[540px]:h-[56px] min-[540px]:w-[56px]"
							/>
							<div className="space-y-[6px]">
								<p className="text-[13px] leading-4 text-b4 min-[540px]:text-[18px] min-[540px]:leading-[22px]">
									Total points earned
								</p>
								<p className="text-2xl font-bold leading-[29px] text-[#0B0B27]  min-[540px]:text-[48px] min-[540px]:leading-[58px]">
									{data?.points}
								</p>
								<p className="text-[13px] leading-4 text-b4 min-[540px]:text-[18px] min-[540px]:leading-[22px]">
									{data?.points === 10 ? 0 : data?.points / 10} referrals
								</p>
							</div>
						</div>
						{/* <div className="flex items-center justify-between md:flex-col md:gap-y-[22px]">
						{metricsData?.map((item, index) => (
							<MetricsCard
								key={`metrics-data-${index}`}
								value={item?.value}
								text={item?.text}
								icon={item?.icon}
							/>
						))}
					</div> */}
					</section>
				) : null}
				{/* end of metrics section */}

				<section className="flex flex-col items-center gap-y-8 bg-white py-5 px-4  md:grid md:flex-none md:grid-cols-2 md:gap-x-8 lg:py-8 lg:px-10">
					<div className="">
						<h1 className="mb-3 w-[240px] text-xl font-bold leading-6 text-b1 min-[540px]:w-[340px] min-[540px]:text-[32px] min-[540px]:leading-[38px]">
							Refer Talents, Clients Earn Gigza points
						</h1>
						<p className="text-[15px] leading-[18px] text-b4 min-[540px]:text-base min-[540px]:leading-[19px]">
							Invite talents and clients to sign up using your link and you earn
							100 points and 200 points for and gig they land on Gigza. Start
							referring now.
						</p>
						{!data?.detail ? (
							<>
								<div className="mt-[19px] grid-cols-[2fr_1fr] rounded-md border border-[#E5E5E5] bg-[#F5F5F5] py-2 px-[10px] lg:grid lg:w-[479px]">
									<p className="text-sm leading-[17px] text-b1">
										gigza-main.vercel.app/dashboard/earn?referralCode=
										{data?.referral_id}
									</p>

									<Button
										title="Copy link"
										onClick={copyToClipboard}
										icon={duplicateIcon}
										className="ml-auto hidden h-9 w-[98px] gap-x-1 px-1 text-sm leading-[17px] lg:flex"
									/>
								</div>
								<Button
									title="Copy link"
									onClick={copyToClipboard}
									icon={duplicateIcon}
									className="ml-auto mt-5 h-9 w-[98px] gap-x-1 px-1 text-sm leading-[17px] lg:hidden"
								/>
							</>
						) : null}
					</div>
					<Image
						src={hero}
						alt=""
						className="min-[540px]:h-[252px] min-[540px]:w-[252px] md:ml-auto"
					/>
				</section>
				{data?.detail ? (
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="max-w-md pb-[55px] pt-10"
					>
						<div className="space-y-6">
							<TextInput
								id="email"
								type="text"
								name="email"
								label="Email"
								placeholder="Enter email"
								{...{ register, errors }}
							/>
							<TextInput
								id="address"
								type="text"
								name="address"
								label="Address"
								placeholder="Enter email"
								disabled
								{...{ register, errors }}
							/>
							<TextInput
								id="referrer_id"
								type="text"
								name="referrer_id"
								label="Referral Code"
								placeholder="Enter referral code"
								// defaultValue={referralCode}
								{...{ register, errors }}
							/>
						</div>

						<Button
							title="Register"
							className="mt-[37px] w-full md:w-[161px]"
							disabled={isSubmittingForm}
						/>
					</form>
				) : null}
			</div>
		</DashboardLayout>
	);
};

export default Earn;

{
	/* <button className="flex h-9 w-[98px] items-center justify-center gap-x-[6px] rounded-[5px] bg-primary text-sm leading-[17px] text-white">
								<CopyToClipboard
									icon={duplicateIcon}
									text="gigza.work/d6473wush"
								/>
								<p>Copy link</p>
							</button> */
}
